- make a bignum that is max_size +1 to test exceptions

- outline of stuff
https://www.youtube.com/watch?v=GazC3A4OQTE&t=321s&ab_channel=Computerphile
Dykstra will search down each path prioritizing the current shortest one on the stack
	so doesn't waste time going down long paths
Dykstra is good, especially for sparse non-uniform systems. 
But has some drawbacks in that it has no heuristic in which way it's going.

https://www.youtube.com/watch?v=ySN5Wnu88nE&ab_channel=Computerphile
A* Search works well for dense systems/uniform grids
A* is a small extension to Dykstra that builds in a heuristic for direction/goal
Heuristic is the euclidia distance (how far we have to go)
You do exact same as dykstra but distance is now path distance + distance to go/heuristic
	prioritizes nodes going roughly in the right direction
Can come up with lots of different heuristics

https://www.youtube.com/watch?v=rop0W4QDOUI&ab_channel=Computerphile
Maze solving using dysktras, A*, depth first, and breadth first search
Can compare my code to this python code
https://github.com/mikepound/mazesolving


Naming 
- no 1 letter words
- no abreivations/acronyms (can autocomplete/have big screens)
- Don't put types in your names (hungarian notation), especially in statically typed langs
- DO put units in names (e.g. seconds, meters) 
- OR have a type that abstracts the unit (unless in dynamically typed lang
- don't prefix I to interfaces/abstract class (unless in C# style guide)
- don't name a class base or abstract (e.g. parent of a class)
	if can't come up with good parent name rename the child
- don't name UTils or helper, 
	maybe functions should just be with their respective types or into own class
- Utils and base are in no standard library