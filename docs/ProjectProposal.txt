- for the purposes of our program we'll be using the same underlying data structures
	We'll be using containers from the STL

- We'll have a 2D mapspace of a variable rectangular size
- At each spot there will be either an empty space or a barrier (barrier's block movement)
- There will be a target and a starting point for each agent
	[legend inspired by Origional Rogue: https://en.wikipedia.org/wiki/Rogue_(video_game)]

E.g. 
Empty map:
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .


Map with agent and Target [based on origional Rogue]
 . . . . . . . . . .
 . . . . . . . X . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . @ . . . . . .
 . . . . . . . . . .

Map with agent, target, and barriers
 . . . . . . . . . .
 . . . . . . . X . .
 . . . . . . . . . .
 . . . . . . + + + .
 . . . . . . . . . .
 . . . + + + . . . .
 . . . . . . . . . .
 . . . . . . . . . .
 . . . @ . . . . . .
 . . . . . . . . . .

Closed maze map with agent and target
 + - - - - - - - - +
 | . . # . . . X . |
 | . . . . # . # . |
 | . # # # # # # # |
 | . . . . . . . . |
 | . # # # . # . # |
 | . # . . . # . . |
 | . # . # . # # . |
 | . # @ # . . . . |
 + - - - - - - - - +

Legend
. = empty/movable space
@ = agent
X = Target
|-/\+# = Barrier space

- The goal of the agent is to move from its starting location to the target (X). 

- For small maps this is usually not a problem. But for very large maps this becomes a non-trivial challenge. 

- The route will be calculated using a pathfinding algorithm. 

- Each pathfinding algorithm will be timed for how long it takes for the algorithm to run and tested 11 times
with statistical analysis performed on each.

- Then the time for each algorithm will be displayed

- Multiple maps of different sizes and complexity will be used to compare

- Pathfinding algorithms: 
	1. Dijkstra
	2. A* Pathfinding
	3. Hierarchical path finding
	If time: 
	4. D* Alogrithm
	5. Multi-agent pathfinding
Sources: https://en.wikipedia.org/wiki/Pathfinding#Algorithms_used_in_pathfinding
	https://www.amazon.ca/AI-Games-Third-Ian-Millington/dp/1138483974

- 

- Future work is to visually display the path or the agent moving in a stop-motion command line
	-> possibly could also visualize path using python
- Future work is to generate maps automatically (like the origional rogue)
- Future work is to integrate into a text-based adventure to show speedup of agents. 

-> Write in markdown and then convert to Latex to make fancy PDF

Q) Solution space datastructures?
	- Class for agent
	- Class for map (matrix? adjacency map? graph?)
	- methods for each algorithm (possibly in agent)
	- timetracking and statistical functions
	- display methods 

Q) Where to use templates and algorithms? In the types of algorithm, map, or agent?

Q) What are the requirements of the project proposal?