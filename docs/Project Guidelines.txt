Project guidelines ^

Programming language and scope:

    Your code must be original, that is, written by you from scratch. You are allowed to include code snippets copied from the lecture notes or other sources, but you must clearly mark where each copied snippet starts and ends and indicate where it was copied from. For example, if you took code a from Stack Overflow answer, be sure to provide the link in a comment.
    Each project must consist of a self-contained C or C++ program (as specified in the project description), which can be split into multiple source and header files, but must compile and run by itself without any additional requirements or dependencies. If I need to download or install anything in order to compile and/or run your project, it will be rejected!
    Your code must compile using GCC v12 with the compiler arguments -Wall -Wextra -Wconversion -Wsign-conversion -Wshadow -Wpedantic -std=c++20 without any errors or warnings. If you get a warning, you must eliminate the mistake that led to it, not the warning itself. For example, a warning about an unused variable x, could technically be eliminated by writing something like (void)x;, but the actual solution should be to not define that variable in the first place.
    You cannot use any other programming languages in your project, all code must be in C or C++ (as specified in the project description). The only exception is that you may use another language, such as Python or Mathematica, to visualize the output of your C/C++ program if desired.
    Your code should be fully portable. This means it should compile successfully with any standards-compliant C/C++ compiler and run on any operating system and CPU architecture. Therefore, you must use only standard C/C++, and must not use any features that are compiler- or OS-specific. Furthermore, you must use fixed-width integer types whenever possible.

The program itself:

    Your program must avoid all of the common errors that I mention in the lecture notes, especially those inside big red boxes!
    Your program should never make use of any user-defined macros. The reasons for this, as well as suggested alternatives, are explained in the lecture notes.
    Your program must accept user input only via files and/or command line arguments. It must not accept input via the terminal at runtime, and the input must not be hard-coded into the source code. Your program must run from start to finish without requiring any user interaction.
    Your program must be able to detect and handle errors, including: user errors (e.g. the user entered a string where they should have entered a number), file errors (e.g. invalid file format), and system errors (e.g. out of memory), and terminate the program with an informative error message, e.g. "Invalid input on line 7 of input.txt: Expected a number".
    If your program uses dynamic memory allocation, you must make sure there are no memory leaks or other memory-related issues, as explained in the lecture notes.

Presentation:

    Your code must include clear and detailed comments explaining what each function does, including the meaning of the return value and each of the arguments; the purpose of each non-trivial variable; and details on any non-trivial algorithms used.
    Your project submission must include clear and detailed external documentation which explains what your code does and how it works, including any relevant equations, algorithms, and concepts. The documentation must include several examples of possible inputs of interest and the outputs they generate. The format of the documentation (Markdown, LaTeX, Word, etc.) is up to you.
    Your code and documentation should be free of typos. This includes any output generated by the program as well as the names of variables, functions, and other symbols in the code itself. I highly recommend using the Code Spell Checker extension [ https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker ] for VS Code for this purpose.

Additional requirements only for the final project:

    The final project is supposed to summarize all that you have learned in this course, and as such, I expect it to be a high-quality production-level program that people could actually use, at least in principle if not in practice.
    Both the draft and the final project must be submitted via GitHub. You do not have to make your repository public, you can also make it private and provide me with access, but ideally this will be a public repository that will contain code that other people might actually want to download and use!
    Don't think of this project as being submitted to a professor for grading; think about it as publishing a piece of software for other people to use. Potential users should be able to understand how the program works, use it for their own needs, and modify the code - without needing any additional information beyond what's in the documentation, comments, and output of the program itself.
    The documentation must be written in Markdown and placed inside a file named README.md in the GitHub repository.
    Comments in Doxygen format must be written for all classes, functions, and variables.
    All documentation, comments, and output should have proper formatting, phrasing, grammar, and spelling. If you are not a native English speaker, consider asking a friend to go over your files and do some editing. Again, remember - the project should look professional, like any other high-quality scientific software you can find on GitHub!
    All code must be properly formatted for maximum readability. I highly recommend using VS Code's automatic formatting feature (Shift+Alt+F) and even set it up to automatically format code on save, as explained in the lecture notes.
    The code must be fully object-oriented, which means objects and their member variables and functions should be used whenever possible, and correctly implement the object-oriented techniques we learned in class, such as encapsulation and class invariants.



Appropriate final project topics ^

First of all, and most importantly, since all students in this course are graduate students, a natural choice is to prepare projects directly related to computational aspects of your research. You may want to consult with your supervisor and/or fellow grad students and figure out a suitable project together.

Another option, in case you have not yet started to perform research or your research does not involve any computational component, is to write your own implementation of a known algorithm of sufficient complexity. For this you can consult, for example, the list of algorithms on Wikipedia [https://en.wikipedia.org/wiki/List_of_algorithms#Computer_graphics].

Some suitable examples include differential equation solving, Monte Carlo methods, numerical integration, various computational physics algorithms, statistical analysis, computer graphics, cryptography, machine learning, parsing, error correction, compression, signal processing, and image processing.

It is preferable that the entire project is self-contained consists only of code that you wrote yourself. If necessary, with my permission, you may use third-party code to, for example, read or write image files for computer graphics or image processing algorithms, perform arbitrary-precision integer arithmetic for cryptography algorithms, and so on. However, you must still implement the actual algorithms yourself.

Simple algorithms like searching, sorting, integer factorization, and so on are not complicated enough to constitute a project on their own. However, you could, for example, write a program which implements the same task using several different algorithms and performs comprehensive performance tests to see which algorithm performs best. Note that a performance test must involve not just measuring time but also performing statistical analysis (e.g. perform the same test several times and calculate the mean and standard deviation).